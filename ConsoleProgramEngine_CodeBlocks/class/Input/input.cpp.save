#include "input.h"
/**KeyAndAction*/
KeyAndAction::KeyAndAction(KEY key, ACTION action):key(key),action(action){}

KeyAndAction& KeyAndAction::operator()(KEY key, ACTION action){
    this->key = key;
    this->action = action;
    return (*this);
}
/**InputQueueNode*/
InputQueueNode::InputQueueNode(InputQueueNode* previous,KeyAndAction data)
                               :previous(previous),data(data),next(nullptr){}

/**InputQueue*/
InputQueue::InputQueue():_head(nullptr),_tail(nullptr),_size(0){}

void InputQueue::Add(KeyAndAction data){
    mutexLock(_mtx,1);
    if(_size == 0){
        _head = new InputQueueNode(nullptr,data);
        _tail = _head;
        _size++;

        return;
    }
    if((_tail->data.action == 2)&&(data.action == 0)){
        InputQueueNode* current = _tail;
        _tail = nullptr;
        while(current->data.action == 2){
            delete current->next;
            current = current->previous;
        }
        current->next = new InputQueueNode(current,data);
        _tail = current->next;
        return;
    }

    _tail->next = new InputQueueNode(_tail,data);
    _tail = _tail->next;
    _size++;
    return;
}

void InputQueue::DeleteFirst(){
    mutexLock(_mtx,1);
    InputQueueNode* next = _head->next;
    _head = next;
}
KeyAndAction InputQueue::GetFirst(){
    mutexLock(_mtx,1);
    return _head->data;
}

bool InputQueue::IsEmpty(){
    mutexLock(_mtx,1);
    return (_size == 0);
}

void InputQueue::_DebugPrint(){
    mutexLock(_mtx,1);
    InputQueueNode* tmp = _head;
    while(tmp != nullptr){
        std::cout <<"|"<< tmp->data.key <<" "<<(int) tmp->data.action <<"|\n";
        tmp = tmp->next;
    }

}
